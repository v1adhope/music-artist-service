// Code generated by mockery v2.44.1. DO NOT EDIT.

package reposmocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entities "github.com/v1adhope/music-artist-service/internal/entities"
)

// ArtistReposer is an autogenerated mock type for the ArtistReposer type
type ArtistReposer struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, artist
func (_m *ArtistReposer) Create(ctx context.Context, artist entities.Artist) (entities.ArtistId, error) {
	ret := _m.Called(ctx, artist)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 entities.ArtistId
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Artist) (entities.ArtistId, error)); ok {
		return rf(ctx, artist)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.Artist) entities.ArtistId); ok {
		r0 = rf(ctx, artist)
	} else {
		r0 = ret.Get(0).(entities.ArtistId)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.Artist) error); ok {
		r1 = rf(ctx, artist)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *ArtistReposer) Delete(ctx context.Context, id entities.ArtistId) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ArtistId) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, id
func (_m *ArtistReposer) Get(ctx context.Context, id entities.ArtistId) (entities.Artist, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 entities.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.ArtistId) (entities.Artist, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entities.ArtistId) entities.Artist); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entities.Artist)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entities.ArtistId) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *ArtistReposer) GetAll(ctx context.Context) ([]entities.Artist, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []entities.Artist
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]entities.Artist, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []entities.Artist); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Artist)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Replace provides a mock function with given fields: ctx, artist
func (_m *ArtistReposer) Replace(ctx context.Context, artist entities.Artist) error {
	ret := _m.Called(ctx, artist)

	if len(ret) == 0 {
		panic("no return value specified for Replace")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entities.Artist) error); ok {
		r0 = rf(ctx, artist)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewArtistReposer creates a new instance of ArtistReposer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArtistReposer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArtistReposer {
	mock := &ArtistReposer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
